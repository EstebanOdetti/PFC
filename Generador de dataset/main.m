close all; clear all; more off;xnode = [  0.0000000000000000, 0.0000000000000000;  0.0000000000000000, 0.3333333333333333;  0.0000000000000000, 0.6666666666666666;  0.0000000000000000, 1.0000000000000000;  0.3333333333333333, 0.0000000000000000;  0.3333333333333333, 0.3333333333333333;  0.3333333333333333, 0.6666666666666666;  0.3333333333333333, 1.0000000000000000;  0.6666666666666666, 0.0000000000000000;  0.6666666666666666, 0.3333333333333333;  0.6666666666666666, 0.6666666666666666;  0.6666666666666666, 1.0000000000000000;  1.0000000000000000, 0.0000000000000000;  1.0000000000000000, 0.3333333333333333;  1.0000000000000000, 0.6666666666666666;  1.0000000000000000, 1.0000000000000000;];icone = [       1,      5,      6,      2;       2,      6,      7,      3;       3,      7,      8,      4;       5,      9,     10,      6;       6,     10,     11,      7;       7,     11,     12,      8;       9,     13,     14,     10;      10,     14,     15,     11;      11,     15,     16,     12;];DIR = [       1, 20.0000000000000000;       2, 20.0000000000000000;       3, 20.0000000000000000;       4, 20.0000000000000000;       5, 20.0000000000000000;       9, 20.0000000000000000;      13, 20.0000000000000000;      14, 20.0000000000000000;      15, 20.0000000000000000;      16, 20.0000000000000000;];NEU = [       4, 5.0000000000000000, 3;       8, 5.0000000000000000, 3;      12, 5.0000000000000000, 3;      16, 5.0000000000000000, 3;];ROB = [];disp('---------------------------------------------------------------');disp('Inicializando modelo de datos...');model.nnodes = size(xnode,1);model.k = [    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;];model.c = [    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;];model.G = [    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;    1.0000000000000000;];% Esquema Temporal: [0] Explícito, [1] Implícito, [X] Estacionariomodel.ts = 4;% Parámetros para esquemas temporalesmodel.rho = 1.0000000000000000;model.cp = 1.0000000000000000;model.maxit =         1000;model.tol = 1.000000e-09;% paso de tiempo cada 1 segundo model.dt = 1;% Condición inicialmodel.PHI_n = mean(DIR(:,2))*ones(model.nnodes,1);disp('Iniciando el método numérico...');% Llamada principal al Método de Diferencias Finitas[PHI,Q] = fdm2d(xnode, icone, DIR, NEU, ROB, model);disp('Finalizada la ejecución del método numérico.');disp('---------------------------------------------------------------');disp('Iniciando el post-procesamiento...');% mode ---> modo de visualización:%           [0] 2D - Con malla%           [1] 3D - Con malla%           [2] 2D - Sin malla%           [3] 3D - Sin malla% graph --> tipo de gráfica:%           [0] Temperatura (escalar)%           [1] Flujo de Calor (vectorial)%           [2] Flujo de Calor eje-x (escalar)%           [3] Flujo de Calor eje-y (escalar)%           [4] Magnitud de Flujo de Calor (escalar)mode = 1;graph = 0;fdm2d_graph_mesh(full(PHI),Q,xnode,icone,mode,graph);tipo_metodo_numerico = 1; % DFxi = 0.5;yi = 0.5;[neighb] = fdm2d_neighbors(icone);[PHI_interpolada,t] = interpolacion(xnode,PHI,icone,neighb,model,DIR,NEU,ROB,xi,yi,tipo_metodo_numerico)disp('Finalizado el post-procesamiento.');